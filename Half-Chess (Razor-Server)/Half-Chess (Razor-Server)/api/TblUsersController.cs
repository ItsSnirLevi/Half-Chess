using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Half_Chess__Razor_Server_.Data;
using Half_Chess__Razor_Server_.Models;

namespace Half_Chess__Razor_Server_.api
{
    [Route("api/[controller]")]
    [ApiController]
    public class TblUsersController : ControllerBase
    {
        private readonly Half_Chess__Razor_Server_Context _context;

        public TblUsersController(Half_Chess__Razor_Server_Context context)
        {
            _context = context;
        }

        [HttpGet("GetGamesByPlayer/{playerId}")]
        public async Task<IActionResult> GetGamesByPlayer(int playerId)
        {
            var games = await _context.TblGames
                .Where(g => g.PlayerID == playerId)
                .ToListAsync();

            return Ok(games);
        }

        [HttpGet("GetGames")]
        public async Task<IActionResult> GetGames()
        {
            var games = await _context.TblGames
                .ToListAsync();

            return Ok(games);
        }

        [HttpPost("PushGame")]
        public async Task<IActionResult> PushGame([FromBody] TblGames gameData)
        {
            if (gameData == null)
                return BadRequest("No game data provided.");

            try
            {
                // Ensure the Id is generated by the server database
                gameData.Id = 0;

                _context.TblGames.Add(gameData);
                await _context.SaveChangesAsync();

                return Ok("Game data received successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while saving game data: {ex.Message}");
            }
        }

        // GET: api/TblUsers
        [HttpGet]
        public async Task<ActionResult<IEnumerable<TblUsers>>> GetTblUsers()
        {
          if (_context.TblUsers == null)
          {
              return NotFound();
          }
            return await _context.TblUsers.ToListAsync();
        }

        // GET: api/TblUsers/5
        [HttpGet("{id}")]
        public async Task<ActionResult<TblUsers>> GetTblUsers(int id)
        {
          if (_context.TblUsers == null)
          {
              return NotFound();
          }
            var tblUsers = await _context.TblUsers.FindAsync(id);

            if (tblUsers == null)
            {
                return NotFound();
            }

            return tblUsers;
        }

        // PUT: api/TblUsers/5
        [HttpPut("{id}/lastplayed")]
        public async Task<IActionResult> UpdateLastPlayed(int id, [FromBody] DateTime lastPlayed)
        {
            var existingUser = await _context.TblUsers.FindAsync(id);
            if (existingUser == null)
            {
                return NotFound();
            }

            // Update only the LastPlayed field
            existingUser.LastPlayed = lastPlayed;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!TblUsersExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/TblUsers
        [HttpPost]
        public async Task<ActionResult<TblUsers>> PostTblUsers(TblUsers tblUsers)
        {
          if (_context.TblUsers == null)
          {
              return Problem("Entity set 'Half_Chess__Razor_Server_Context.TblUsers'  is null.");
          }
            _context.TblUsers.Add(tblUsers);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetTblUsers", new { id = tblUsers.Id }, tblUsers);
        }


        // DELETE: api/TblUsers/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTblUsers(int id)
        {
            if (_context.TblUsers == null)
            {
                return NotFound();
            }
            var tblUsers = await _context.TblUsers.FindAsync(id);
            if (tblUsers == null)
            {
                return NotFound();
            }

            _context.TblUsers.Remove(tblUsers);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool TblUsersExists(int id)
        {
            return (_context.TblUsers?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
